---
- name: Create temporary directory for Harvester configs
  file:
    path: "/tmp/harvester-configs"
    state: directory
    mode: '0755'
  delegate_to: localhost
  become: no

- name: Generate first node configuration
  template:
    src: harvester_config.yaml.j2
    dest: "/tmp/harvester-configs/harvester-init.yaml"
    mode: '0644'
  vars:
    node: "{{ harvester_nodes[0] }}"
    install_mode: "create"
  delegate_to: localhost
  become: no

- name: Display configuration (test mode)
  debug:
    msg: "Would apply initial Harvester configuration to {{ harvester_nodes[0].name }}"
  when: harvester_test_mode

- name: Copy configuration to first node
  copy:
    src: "/tmp/harvester-configs/harvester-init.yaml"
    dest: "/oem/99-harvester.yaml"
    mode: '0644'
    owner: root
    group: root
  delegate_to: "{{ harvester_nodes[0].ip }}"
  become: yes
  when: not harvester_test_mode

- name: Display reboot warning
  debug:
    msg: |
      WARNING: First node will be rebooted to apply Harvester configuration.
      This will install Harvester and initialize the cluster.
      The process may take 10-15 minutes.
  when: not harvester_test_mode

- name: Reboot first node to apply configuration
  reboot:
    reboot_timeout: 900  # 15 minutes
    msg: "Rebooting to install Harvester and initialize cluster"
    pre_reboot_delay: 10
    post_reboot_delay: 30
  delegate_to: "{{ harvester_nodes[0].ip }}"
  become: yes
  when: not harvester_test_mode

- name: Wait for SSH to become available again
  wait_for:
    host: "{{ harvester_nodes[0].ip }}"
    port: 22
    delay: 60
    timeout: 600
  delegate_to: localhost
  become: no
  when: not harvester_test_mode

- name: Wait for Harvester API to become available
  uri:
    url: "https://{{ harvester_cluster_vip }}:6443/healthz"
    validate_certs: no
    status_code:
      - 200
      - 401  # Auth required is also a good sign
  register: api_health
  until: api_health.status in [200, 401]
  retries: 60
  delay: 10
  delegate_to: localhost
  become: no
  when: not harvester_test_mode

- name: Wait for Harvester API authentication endpoint
  uri:
    url: "https://{{ harvester_cluster_vip }}:6443/v3"
    validate_certs: no
    status_code:
      - 200
      - 401
  register: api_auth
  until: api_auth.status in [200, 401]
  retries: 30
  delay: 10
  delegate_to: localhost
  become: no
  when: not harvester_test_mode

- name: Retrieve kubeconfig from Harvester
  uri:
    url: "https://{{ harvester_cluster_vip }}:6443/v3/clusters/local?action=generateKubeconfig"
    method: POST
    headers:
      Authorization: "Bearer {{ harvester_cluster_token }}"
      Content-Type: "application/json"
    body_format: json
    body:
      description: "Ansible managed kubeconfig"
    validate_certs: no
    status_code:
      - 200
      - 201
  register: kubeconfig_response
  retries: 5
  delay: 10
  delegate_to: localhost
  become: no
  when: not harvester_test_mode

- name: Save kubeconfig locally
  copy:
    content: "{{ kubeconfig_response.json.config }}"
    dest: "{{ harvester_kubeconfig_path }}"
    mode: '0600'
  delegate_to: localhost
  become: no
  when: 
    - not harvester_test_mode
    - kubeconfig_response is defined
    - kubeconfig_response.json is defined

- name: Test kubeconfig connectivity
  k8s_info:
    api_version: v1
    kind: Node
    kubeconfig: "{{ harvester_kubeconfig_path }}"
  register: cluster_nodes
  delegate_to: localhost
  become: no
  when: not harvester_test_mode

- name: Display cluster initialization status
  debug:
    msg: |
      Cluster Initialization Complete:
      - First node: {{ harvester_nodes[0].name }}
      - Cluster VIP: {{ harvester_cluster_vip }}
      - API Status: Healthy
      - Kubeconfig: {{ harvester_kubeconfig_path }}
      - Initial nodes: {{ cluster_nodes.resources | length if not harvester_test_mode else 'N/A (test mode)' }}

- name: Clean up temporary configs
  file:
    path: "/tmp/harvester-configs"
    state: absent
  delegate_to: localhost
  become: no
