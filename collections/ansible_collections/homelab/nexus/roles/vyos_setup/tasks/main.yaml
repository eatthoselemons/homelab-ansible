---
- name: Check if we have required secrets
  when: vyos_test_mode | default(false)
  assert:
    that:
      - vyos_admin_password is defined
      - vyos_ansible_ssh_key is defined
      - vyos_ansible_ssh_private_key is defined
    fail_msg: "Test mode requires vyos_admin_password, vyos_ansible_ssh_key, and vyos_ansible_ssh_private_key to be set by prepare.yml"

- name: Validate Infisical environment variables
  when: not (vyos_test_mode | default(false))
  block:
    - name: Check INFISICAL_CLIENT_ID is set
      assert:
        that:
          - infisical_client_id is defined
          - infisical_client_id | length > 0
        fail_msg: "INFISICAL_CLIENT_ID environment variable must be set. Please export INFISICAL_CLIENT_ID with your Infisical client ID."
        success_msg: "INFISICAL_CLIENT_ID is set"

    - name: Check INFISICAL_CLIENT_SECRET is set
      assert:
        that:
          - infisical_client_secret is defined
          - infisical_client_secret | length > 0
        fail_msg: "INFISICAL_CLIENT_SECRET environment variable must be set. Please export INFISICAL_CLIENT_SECRET with your Infisical client secret."
        success_msg: "INFISICAL_CLIENT_SECRET is set"

    - name: Check INFISICAL_PROJECT_ID is set
      assert:
        that:
          - infisical_project_id is defined
          - infisical_project_id | length > 0
        fail_msg: "INFISICAL_PROJECT_ID environment variable must be set. Please export INFISICAL_PROJECT_ID with your Infisical project ID."
        success_msg: "INFISICAL_PROJECT_ID is set"

    - name: Retrieve secrets from Infisical
      set_fact:
        vyos_admin_password: "{{ lookup('infisical.vault.read_secrets',
            universal_auth_client_id=infisical_client_id,
            universal_auth_client_secret=infisical_client_secret,
            project_id=infisical_project_id,
            path='/',
            env_slug='prod',
            url=infisical_url,
            secret_name='systemSudoPassword'
          ) | first | json_query('value') }}"
        vyos_ansible_ssh_key: "{{ lookup('infisical.vault.read_secrets',
            universal_auth_client_id=infisical_client_id,
            universal_auth_client_secret=infisical_client_secret,
            project_id=infisical_project_id,
            path='/',
            env_slug='prod',
            url=infisical_url,
            secret_name='nexusAnsiblePublicSshKey'
          ) | first | json_query('value') }}"
        vyos_ansible_ssh_private_key: "{{ lookup('infisical.vault.read_secrets',
            universal_auth_client_id=infisical_client_id,
            universal_auth_client_secret=infisical_client_secret,
            project_id=infisical_project_id,
            path='/',
            env_slug='prod',
            url=infisical_url,
            secret_name='nexusAnsiblePrivateSshKey'
          ) | first | json_query('value') }}"

    - name: Validate retrieved secrets
      assert:
        that:
          - vyos_admin_password is defined
          - vyos_admin_password | length > 0
          - vyos_ansible_ssh_key is defined
          - vyos_ansible_ssh_key | length > 0
          - vyos_ansible_ssh_private_key is defined
          - vyos_ansible_ssh_private_key | length > 0
        fail_msg: |
          Failed to retrieve secrets from Infisical. Please ensure:
          1. Your Infisical credentials are correct
          2. The following secrets exist in Infisical:
             - systemSudoPassword (plain text password)
             - nexusAnsiblePublicSshKey
             - nexusAnsiblePrivateSshKey
          3. You have access to the project: {{ infisical_project_id }}
        success_msg: "Successfully retrieved all required secrets from Infisical"

- name: Build VyOS image if needed
  include_role:
    name: homelab.nexus.vyos_image_builder
  when: vyos_build_image | default(false)

- name: Install libvirt and dependencies
  apt:
    name:
      - qemu-kvm
      - libvirt-daemon-system
      - libvirt-clients
      - bridge-utils
      - python3-libvirt
      - cloud-image-utils
    state: present
    update_cache: yes

- name: Start and enable libvirtd
  systemd:
    name: libvirtd
    state: started
    enabled: yes

- name: Create required directories
  file:
    path: "{{ item }}"
    state: directory
    owner: libvirt-qemu
    group: kvm
    mode: '0755'
  loop:
    - /var/lib/libvirt/images
    - /var/lib/libvirt/cloud-init

- name: Check for VyOS ISO
  stat:
    path: "{{ vyos_iso_path | default(playbook_dir + '/../images/vyos/vyos-current.iso') }}"
  register: vyos_iso
  failed_when: not vyos_iso.stat.exists

- name: Create cloud-init configuration
  when: vyos_cloud_init_enabled | default(true)
  block:
    - name: Create cloud-init user data
      template:
        src: cloud-init/user-data.j2
        dest: /var/lib/libvirt/cloud-init/vyos-user-data
        mode: '0644'
      register: cloud_init_user_data
      # Only regenerate ISO if template changed
      notify: regenerate cloud-init iso

    - name: Create cloud-init network config
      template:
        src: cloud-init/network-config.j2
        dest: /var/lib/libvirt/cloud-init/vyos-network-config
        mode: '0644'
      register: cloud_init_network
      notify: regenerate cloud-init iso

- name: Configure libvirt networks
  include_tasks: configure_networks.yaml
  when: not (vyos_test_mode | default(false))

- name: Use mock network operations in test mode
  when: vyos_test_mode | default(false)
  include_tasks: test_mocks/mock_network.yaml

- name: Deploy VyOS VM using delegated_vm_install
  include_role:
    name: stafwag.delegated_vm_install
  vars:
    vm_ip_address: "{{ vyos_vm_ip }}"
    vm_kvm_host: "{{ inventory_hostname }}"
    delegated_vm_install:
      post:
        pause:
          seconds: 30
        update_etc_hosts: false
        ensure_running: true
        package_update: false
        reboot_after_update: false
      vm:
        hostname: "{{ vyos_vm.name }}"
        path: "/var/lib/libvirt/images/"
        boot_disk:
          src: "{{ vyos_iso.stat.path }}"
        size: "{{ vyos_vm.disk_size }}"
        disks:
          - dest: "{{ vyos_cloud_init_iso }}"
            format: raw
            src: "{{ vyos_cloud_init_iso }}"
            type: cdrom
        memory: "{{ vyos_vm.memory }}"
        vcpus: "{{ vyos_vm.vcpus }}"
        interface: "lan"
        gateway: "{{ ansible_default_ipv4.gateway | default('192.168.122.1') }}"
        dns_nameservers: "{{ vyos_dns_servers | join(',') }}"
        wait: 0
        poweroff: false
        reboot: false
  when: not (vyos_test_mode | default(false))

- name: Use mock VM operations in test mode
  when: vyos_test_mode | default(false)
  include_tasks: test_mocks/mock_vm.yaml

- name: Check if VM already exists
  community.libvirt.virt:
    name: "{{ vyos_vm.name }}"
    command: list_vms
  register: existing_vms
  when: not (vyos_test_mode | default(false))

- name: Define VM using XML template
  community.libvirt.virt:
    command: define
    xml: "{{ lookup('template', 'vyos_vm.xml.j2') }}"
    autostart: yes
  when: 
    - not (vyos_test_mode | default(false))
    - vyos_vm.name not in existing_vms.list_vms

- name: Start VM
  community.libvirt.virt:
    name: "{{ vyos_vm.name }}"
    state: running
  when: not (vyos_test_mode | default(false))

- name: Wait for VyOS to be accessible
  wait_for:
    host: "{{ vyos_vm_ip }}"
    port: "{{ vyos_ssh_port }}"
    delay: 60
    timeout: 600
  when: not (vyos_test_mode | default(false))

- name: Apply VyOS configuration
  include_tasks: vyos_config.yaml
  when: 
    - vyos_configure_router | default(true)
    - not (vyos_test_mode | default(false))

- name: Apply security hardening
  include_tasks: security_hardening.yaml
  when: 
    - vyos_security_hardening | default(true)
    - not (vyos_test_mode | default(false))

- name: Configure VLANs
  include_tasks: vlan_setup.yaml
  when: vyos_enable_vlans | default(true) 
