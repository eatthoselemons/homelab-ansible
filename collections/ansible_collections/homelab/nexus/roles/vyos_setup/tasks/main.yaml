---
- name: Load ports configuration
  ansible.builtin.include_vars:
    file: "{{ role_path }}/../../vars/ports.yaml"
    name: ports

- name: Install required packages
  apt:
    name:
      - qemu-kvm
      - libvirt-daemon-system
      - libvirt-clients
      - bridge-utils
      - python3-libvirt
    state: present
    update_cache: yes

- name: Start and enable libvirtd
  systemd:
    name: libvirtd
    state: started
    enabled: yes

- name: Ensure libvirt images directory exists
  file:
    path: /var/lib/libvirt/images
    state: directory
    owner: libvirt-qemu
    group: kvm
    mode: '0755'

- name: Create VyOS disk image (for non-delegated scenarios)
  include_role:
    name: stafwag.qemu_img
  vars:
    qemu_img:
      dest: "{{ vyos_vm.disk_path }}"
      size: "{{ vyos_vm.disk_size | default('20G') }}"
      format: qcow2
      overwrite: true
  when: vyos_network_mode == 'nat' and not (vyos_configure_router | default(true))

- name: Fix disk image ownership for libvirt (for non-delegated scenarios)
  file:
    path: "{{ vyos_vm.disk_path }}"
    owner: libvirt-qemu
    group: kvm
    mode: '0644'
  when: vyos_network_mode == 'nat' and not (vyos_configure_router | default(true))

- name: Create libvirt network configuration for WAN
  community.libvirt.virt_net:
    name: wan
    state: present
    command: define
    xml: "{{ lookup('template', 'wan_network.xml.j2') }}"

- name: Create libvirt network configuration for LAN
  community.libvirt.virt_net:
    name: lan
    state: present
    command: define
    xml: "{{ lookup('template', 'lan_network.xml.j2') }}"

- name: Start WAN network
  community.libvirt.virt_net:
    name: wan
    state: active

- name: Start LAN network
  community.libvirt.virt_net:
    name: lan
    state: active


- name: Create mock VyOS VM definition for testing
  community.libvirt.virt:
    command: define
    xml: |
      <domain type='qemu'>
        <name>{{ vyos_vm.name }}</name>
        <memory unit='MiB'>{{ vyos_vm.memory }}</memory>
        <vcpu>{{ vyos_vm.vcpus }}</vcpu>
        <os>
          <type arch='x86_64' machine='pc'>hvm</type>
          <boot dev='hd'/>
        </os>
        <features>
          <acpi/>
          <apic/>
        </features>
        <devices>
          <disk type='file' device='disk'>
            <driver name='qemu' type='qcow2'/>
            <source file='{{ vyos_vm.disk_path }}'/>
            <target dev='vda' bus='virtio'/>
          </disk>
          <interface type='network'>
            <source network='default'/>
            <model type='virtio'/>
          </interface>
          <console type='pty'>
            <target type='serial' port='0'/>
          </console>
        </devices>
      </domain>
    autostart: false
  when: vyos_network_mode == 'nat'
  register: vm_creation

- name: Start mock VyOS VM for testing
  community.libvirt.virt:
    name: "{{ vyos_vm.name }}"
    state: running
  when: vyos_network_mode == 'nat' and vm_creation is succeeded
  register: vm_start
  failed_when: false

- name: Create VyOS VM with XML template (for production)
  community.libvirt.virt:
    command: define
    xml: "{{ lookup('template', 'vyos_vm.xml.j2') }}"
    autostart: true
  when: vyos_network_mode != 'nat'

- name: Start VyOS VM (for production)
  community.libvirt.virt:
    name: "{{ vyos_vm.name }}"
    state: running
  when: vyos_network_mode != 'nat'

- name: Include VLAN network setup
  ansible.builtin.include_tasks: vlan_setup.yaml
  when: vyos_enable_vlans | default(true)

- name: Include VyOS SSH setup
  ansible.builtin.include_tasks: vyos_ssh_setup.yaml
  when: vyos_configure_router | default(true) or vyos_enable_ssh_setup | default(false)

- name: Include VyOS configuration
  ansible.builtin.include_tasks: vyos_config.yaml
  when: vyos_configure_router | default(true)

- name: Include VyOS firewall configuration
  ansible.builtin.include_tasks: vyos_firewall.yaml
  when: vyos_configure_router | default(true) 